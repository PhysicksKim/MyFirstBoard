테스트 주도 개발이 뭔지 헷갈릴 때
가닥을 정확히 하기 위해서 추가해두는 문서 (출처 : 객체지향 프로그래밍 - 김동현)


1. 테스트 주도 개발 vs 기능 주도 개발
기능 주도 개발이라는 말이 있는지 모르겠지만.
기능 주도 개발은, 기능을 먼저 만들고 그 외의 것(테스트, 객체 구성 손보는 리펙토링 등)을 만드는 것이다.
예를 들어 검색 기능을 먼저 만들고, 그에 맞춰 테스트를 짜거나 검색 기능들을 묶는 repository 를 만드는 등 작업을 하는 것이다.

테스트 주도 개발은, 테스트를 먼저 만들고 그에 맞춰 기능을 개발하는 것이다.
예를 들면, 테스트를 통해서 먼저 "어떤 입력값이 들어오면, 어떤 값이 있을 때, 어떻게 리턴해줘야 한다" 라는 시나리오를 기능보다 먼저 짜놓고,
그 다음에 기능을 테스트에 맞춰서 개발하는 것이다.
이후 다양한 테스트 케이스를 추가하면서 리펙토링 하는 등의 과정을 거친다.

2. 테스트 주도 개발을 하는 이유
테스트의 존재 의의가 뭘까?
가장 우선적으로 떠오르는건 이렇다
"테스트가 있으면, 코드 변경(추가,수정,삭제)이 있을 때, 버그가 나는지 체크를 먼저 할 수 있다"
틀린 말은 아니다.
하지만, 본질적으로 테스트 주도 개발이 등장한 이유를 파고들면 답은 이렇다.
"테스트를 먼저 만들고 그에 맞춰 기능을 개발하면, 더욱 객체지향적으로 코드를 작성할 수 있다"
이게 무슨 말일까?

3. 테스트 주도 개발은 "객체지향적 개발을 강제한다"
그냥 맨땅에 "객체지향적으로 개발해라!" 라고 명령하면 머리가 복잡해진다.
"이렇게 하면 재사용성이 늘어날까?" "이렇게 하면 객체간 의존성을 떨어뜨릴 수 있을까?" 등등
객체지향의 목표인 "의존성은 낮게, 집중도는 높게"에 도달하는게 너무 어렵게 느껴진다
(의존성은, 한 객체가 바뀌면 다른 객체도 바뀌어야 하는것)
(집중도는, 한 객체에 관련된 기능들은 그 객체가 갖도록 하는것)

하지만 테스트 주도 개발을 하면
객체 지향적으로 코딩을 강제할 수 있다.

먼저, 테스트는 when-given-then 구조로 이뤄져있다.
when  : 어떤걸 하려고 할 때
given : { a, b, c } 이런 데이터가 주어지면
then  : ~~~ 이런 결과를 내야한다
이렇게 너무도 직관적인 구조로 되어있다.

여기서 핵심은, 테스트를 먼저 만든다는 점이고, 테스트는 인풋과 아웃풋(결과)에만 관심이 있다는 점이다.
예를 들어
when : 게시판 검색 메서드는
given : { 글1 , 글2 , ... } 같은 데이터가 있고, 검색 조건이 { 내용+제목 } 일 때
then : { 글2 , 글4 , ... } 같은 결과를 내야한다
라는 테스트가 있다고 하자

그런데 잘 보면
"게시판 검색 메서드는 이렇게 동작해야 한다"(when)에 대해서
input(given) 과 output(then)으로 딱 정의해주고 있다.

따라서 또 다른 검색 메서드를 만들어야 하는 상황이 오더라도
기존 테스트에 맞게 코드를 짤 수 있게된다.

물론 무적은 아니다. 위에서 제시하는 메서드는 input으로 글목록, 조건 두 가지를 받는다.
하지만 적어도 메서드는 이래야 한다 라는 방향성을
두루뭉실한 글보다 코드로 명확하게 제시하고있다.
테스트 주도 개발은 객체지향적 개발을 강제해준다는 측면이 핵심이다.
물론 더 좋은 테스트를 위해, 더 포괄적이고 공통속성등을 파악하는건 개발자 개개인의 역량에 달린 문제다.
"더 범용적으로 미리 코드 중복을 줄여줄 테스트는 어떻게 만드나요" 와 같은 질문은
테스트 주도 개발에 대한 질문이 아니라, "객체지향 특성들을 어떻게 처음부터 잘 찾아내나요?" 에 해당하는 질문이다.


4. 정리
테스트 주도 개발은 먼저 테스트를 만들고, 그 다음 관련 클래스나 기능들을 세부적으로 구현해나가는 것이다.

따라서 테스트 주도 개발은 객체지향적 개발을 강제해주는 역할을 한다.

왜냐하면 테스트가 제시하는 대로 동작해야 하기 때문이다.
서로 다른 형태로 구현된 클래스일지라도 동일한 목적을 갖는 클래스라면, 테스트가 제시하는 대로 동작해야하기 때문이다.
따라서 테스트가 각 클래스의 동작을 강제하기 때문에, 객체지향적 개발을 강제해주는 역할을 한다.

다만, 오해하기 쉬운점은
테스트 주도 개발이 객체지향적으로 설계하는 법을 도와주는 게 아니라, 객체지향적으로 구현하는 것을 도와주는 것이다.

테스트 주도 개발에서 "좋은 테스트를 만드는 법"은 "객체들간의 공통 특성을 잘 뽑아내기"와 같다.
따라서 어쩔때는 테스트 A 를 만들어 놨는데, 나중에 듣도보도 못한 신기술을 추가를 하려고 보니까
테스트 A로는 신기술이 접목된걸 테스트 할 수 없어서 테스트A`가 필요할 수 있다.

만약 처음부터 이상적(객체지향적)으로 테스트를 만들었으면 문제가 없었을 것이다.
하지만 누가 그런 신기술이 등장할지 알았겠나? 그 잘난 천재들이 만든 프레임워크도 결국 수명을 다하거나 스파게티가 되곤 하는데.

따라서 테스트 주도 개발은, "이렇게 객체를 구성하면 되겠다!"를 도와주는 개발원칙이 아니라
"그럼 다른 개발자들이나 미래의 내가, 어떻게 이 설계 원칙을 지키면서 개발해나갈까?" 에 대해서 강제하는 녀석이다.